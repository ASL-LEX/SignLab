import { Component } from '@angular/core';
import { EntryService } from '../../../../core/services/entry.service';
import { LocationInfo } from 'shared/dtos/entry.dto';
import { AbstractControl } from '@angular/forms';

/**
 * Implementation of an abstract control that has a method for marking the
 * control as valid.
 */
class ManualControl extends AbstractControl {
  /** Represents if the control is valid or not */
  isValid: boolean;

  constructor() {
    super(null, null);
  }

  /** Marks the control as valid.*/
  markAsValid() { this.isValid = true; }

  /** Make the control as invalid */
  markAsInvalid() { this.isValid = false;}

  get valid(): boolean { return this.isValid; }

  get invalid(): boolean { return !this.valid; }

  // Placeholder for the abstract methods that need to be implemented.
  patchValue(_value: any, _options?: { onlySelf?: boolean; emitEvent?: boolean; }) {
  }

  setValue(_value: any, _options?: { onlySelf?: boolean; emitEvent?: boolean; }) {
  }

  reset(_value?: any, _options?: { onlySelf?: boolean; emitEvent?: boolean; }) {
  }

}

/**
 * Handles the UI to allow users to add new entries to SignLab.
 */
@Component({
  selector: 'entry-upload-dialog',
  templateUrl: './entry-upload-dialog.component.html',
  styleUrls: ['./entry-upload-dialog.component.css'],
})
export class EntryUploadDialog {
  /**
   * Represents if the CSV has been uploaded successfully, controls if
   * the user can upload a zip yet
   */
  csvUploadComplete: boolean;
  /**
   * Stores the error message that was generated by the last upload attempt
   */
  uploadStatusMessage: string;
  /**
   * Array of potential locations of errors to display to the user
   */
  errorLocations: LocationInfo[];
  /**
   * Controls if the user can move from selecting the dataset to uploading
   * the metadata
   */
  datasetSelectControl = new ManualControl();

  constructor(private entryService: EntryService) {
    this.csvUploadComplete = false;
    this.uploadStatusMessage = '';
    this.errorLocations = [];
    this.datasetSelectControl.markAsValid()
  }

  async uploadCSV(event: any) {
    const result = await this.entryService.uploadCSV(event.target.files[0]);

    // Update status message displayed to user
    if (result.type != 'success') {
      this.uploadStatusMessage = result.message!;
      this.errorLocations = result.where ? result.where : [];

      // Clear input field to allow for another upload attempt
      event.target.value = '';
    } else {
      this.uploadStatusMessage = 'CSV uploaded successfully';
      this.errorLocations = [];
    }

    // As long as the result wasn't an error, can upload the ZIP
    if (result.type != 'error') {
      this.csvUploadComplete = true;
    }
  }

  async uploadZIP(event: any) {
    const result = await this.entryService.uploadZIP(event.target.files[0]);

    // Upload status message displayed to user
    if (result.type != 'success') {
      this.uploadStatusMessage = result.message!;
      this.errorLocations = result.where ? result.where : [];

      // Clear input field to allow for another upload attempt
      event.target.value = '';
    } else {
      this.uploadStatusMessage =
        'Entry uploaded successfully, reload page to see new entries';
      this.errorLocations = [];
    }
  }

  /**
   * Download the template for the entries
   */
  async downloadCSVTemplate() {
    const header = await this.entryService.getCSVHeader();

    const a = document.createElement('a');
    const blob = new Blob([header], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);

    a.href = url;
    a.download = 'entry-upload-template.csv';
    a.click();
    window.URL.revokeObjectURL(url);
    a.remove();
  }
}
